tic;
% Define an antisymmetric matrix with a guaranteed null space of dimension >= 2
M1 = [0 -1 -1 -1 -1; 1 0 0 0 0; 1 0 0 0 0; 1 0 0 0 0; 1 0 0 0 0;];
M2 = [0 0 -1 -1; 0 0 -1 -1; 1 1 0 0; 1 1 0 0];
M3 = [0 1 1; -1 0 -1; -1 1 0;];
M4 = [0 2; -2 0]

M = M1;

%mainloop(M);

%disp("loop done");


[modifiedVectors, indicesAndCoeffs] = processSolutionVectors(M);
columnVector = indicesAndCoeffs(:,2);
indices = columnVector.'; 
disp(modifiedVectors);
results = convertflavexpr(M, indices, modifiedVectors);

% Display the results
for idx = 1:length(results)
    fprintf('Results for index %d removed:\n', indices(idx));
    disp('Pairs and Values:');
    for k = 1:size(results{idx}.pairs, 1)
        fprintf('M(%d,%d)*V(%d)*V(%d) * (-k%d + l%d)^2/2 = %s\n', ...
                results{idx}.pairs(k, 1), results{idx}.pairs(k, 2), ...
                results{idx}.pairs(k, 1), results{idx}.pairs(k, 2), ...
                indices(idx), indices(idx), char(results{idx}.values(k)));
    end
end
%disp(result);
toc;
